#
# Copyright (c) 2013 Citrix Systems, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# <summary>dom0 XSM module</summary>

########################################
## <summary>
##	Allow the specified domain to
##	create a private event type
##	for use with dom0.
## </summary>
## <param name="dst_type">
##	<summary>
##	Type of the destination domain.
##	</summary>
## </param>
## <param name="event_type">
##	<summary>
##	Type of the event dom0 will create.
##	</summary>
## </param>
#
interface(`dom0_event_dst',`
	gen_require(`
		type dom0_t;
	')

	create_channel($1, dom0_t, $2)

	allow $1 $2:event send;
	allow dom0_t $2:event create;
')
########################################
## <summary>
##	Allow dom0 to create an event type
##	through a transition destined for
##	the parameter domain.
## </summary>
## <param name="dst_type">
##	<summary>
##	Type of the destination domain.
##	</summary>
## </param>
## <param name="event_type">
##	<summary>
##	Type of the event dom0 will create.
##	</summary>
## </param>
#
interface(`dom0_event_src',`
	gen_require(`
		type dom0_t;
	')

	create_channel(dom0_t, $1, $2)

	allow dom0_t $2:event { status send };
')
########################################
## <summary>
##	Allow a type to use dom0 to host its driver domain.
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain using dom0 as its driver domain.
##      Note: see stubdom.if for more rules that dom0 doesn't
##            seem to require
##	</summary>
## </param>
#
interface(`dom0_ioemu',`
	gen_require(`
		type dom0_t;
	')

	allow dom0_t $1:hvm dm;
')
########################################
## <summary>
##	Allow the specified type to copy dom0 grants.
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain allowed access.
##	</summary>
## </param>
#
interface(`dom0_copy_grant',`
	gen_require(`
		type dom0_t;
	')

	allow $1 dom0_t:grant copy;
')
########################################
## <summary>
##	Allow the specified type to send
##	data via argo to dom0
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain allowed access.
##	</summary>
## </param>
#
interface(`dom0_send_argo',`
	gen_require(`
		type dom0_t;
	')

	allow $1 self:argo enable;
	allow $1 dom0_t:argo send;
')
########################################
## <summary>
##	Allow dom0 to send data via argo to
##	the specified domain.
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain allowed access.
##	</summary>
## </param>
#
interface(`dom0_recv_argo',`
	gen_require(`
		type dom0_t;
	')

	allow dom0_t self:argo enable;
	allow dom0_t $1:argo send;
')
########################################
## <summary>
##	Allow dom0 to map write the specified
##  guest grants.
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain allowed access.
##	</summary>
## </param>
#
interface(`dom0_map_write_grant_guest',`
	gen_require(`
		type dom0_t;
	')

	allow dom0_t $1:grant map_write;
')
########################################
## <summary>
##	Allow the specified type to map write dom0 grants.
## </summary>
## <param name="type">
##	<summary>
##	Type of the domain allowed access.
##	</summary>
## </param>
#
interface(`dom0_map_write_grant',`
	gen_require(`
		type dom0_t;
	')

	allow $1 dom0_t:grant map_write;
')
